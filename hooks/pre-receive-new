#!/bin/bash

export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:$PATH

PUPPETLINT_FLAGS=${PUPPETLINT_FLAGS:-'--no-autoloader_layout-check --no-80chars-check --no-class_inherits_from_params_class-check'}
TMPDIR=${TMPDIR:-'/tmp'}
TMPFILE=$(mktemp -d "${TMPDIR}"/tmp.XXXXXXXXXX)
TMPR10K=$(mktemp -d "${TMPDIR}"/tmp.XXXXXXXXXX)
STATUS=0

# Register exit trap for removing temporary files
trap 'rm -rf $TMPFILE $TMPR10K' EXIT INT HUP

binary_validation() {

    # Check for existence of binaries before trying to use them
    for binary in ruby puppet puppet-lint erb svnauthz-validate; do
        which $binary >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "$binary not found!"
            return 1
        fi
    done
}

validate_ref() {
    case "$refname" in
        refs/heads/*)
            branch=$(expr "$refname" : "refs/heads/\(.*\)")
            topicbranch=$(expr "$branch" : "\(.*/.*\)")
            topicuser=$(expr "$branch" : "\(.*\)/.*")
            echo "Branch: $branch"
            if [ 0 -ne $(expr "$newrev" : "0*$") ]; then # deleting
                echo "Deleting branch $branch"
                return
            else # updating
                echo "Doing testing"
                git archive $newrev | tar x -C ${TMPFILE} >/dev/null 2>&1
                if [ 0 -ne $(expr "$oldrev" : "0*$") ]; then
                    oldrev=`git show-branch | grep '\*' | grep -v "$newrev" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'`
                fi
                FILES=""
                commits=$(git show --format=format:%H --quiet $oldrev..$newrev)
                for commit in $commits; do
                    file="$(git diff --name-only $commit^..$commit)"
                    FILES="$FILES $file"
                done
                echo $FILES
                for file in ${FILES[@]}; do
                    to_check="$TMPFILE/$file"
                    extension="${file##*.}"

                    if [ ${file} == *"asf-authorization-template"* ]; then
                        echo "Testing authz validity"
                    else
                        case $extension in
                            pp)
                                echo "Testing puppet syntax on $to_check ..."
                                echo "Testing puppet linting style on $to_check ..."
                                ;;

                            erb)
                                echo "Testing erb syntax on $to_check ..."
                                ;;

                            yml|yaml)
                                echo "Testing yaml syntax on $to_check ..."
                                ;;

                            json)
                                echo "Testing json syntax on $to_check ..."
                                ;;
                        esac
                    fi
                done
            fi
            ;;
    esac
}

binary_validation || exit 1

while read oldrev newrev refname
do
    validate_ref $oldrev $newrev $refname
done

if [ $STATUS -ne 0 ]; then
    echo "rejecting push"
fi
exit $STATUS
