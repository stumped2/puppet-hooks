#!/bin/bash

export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:$PATH

PUPPETLINT_FLAGS=${PUPPETLINT_FLAGS:-'--no-autoloader_layout-check --no-80chars-check --no-class_inherits_from_params_class-check'}
TMPDIR=${TMPDIR:-'/tmp'}
TMPFILE=$(mktemp -d "${TMPDIR}"/tmp.XXXXXXXXXX)
TMPR10K=$(mktemp -d "${TMPDIR}"/tmp.XXXXXXXXXX)
STATUS=0


# Register exit trap for removing temporary files
trap 'rm -rf $TMPFILE $TMPR10K' EXIT INT HUP

# Check for ruby binary
which ruby >/dev/null 2>&1 || exit 1

# Check for Puppet binary
which puppet >/dev/null 2>&1 || exit 1

# Check for puppet-lint
which puppet-lint >/dev/null 2>&1 || exit 1

# Check for erb
which erb >/dev/null 2>&1 || exit 1

while read oldrev newrev refname; do
  git archive $newrev | tar x -C ${TMPFILE} >/dev/null 2>&1
  if [[ $oldrev == "0000000000000000000000000000000000000000" ]]; then
    newrev=`git rev-parse --abbrev-ref HEAD`
    oldrev=`git show-branch | grep '\*' | grep -v "$newrev" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'`
  fi

  declare -a FILES
  FILES=$(git diff --name-only --diff-filter=ACM $oldrev $newrev)

  for file in ${FILES[@]}
  do
    to_check="$TMPFILE/$file"
    extension="${file##*.}"

    if [[ ${file} == *"asf-authorization-template"* ]]; then
      echo "Testing authz validity"
      /usr/bin/svnauthz-validate $to_check
      if [[ $? -ne 0 ]]; then
        echo "asf-authorization-template change is invalid"
        STATUS=2
      fi 
    else
      case $extension in
        pp)
          echo "Testing puppet syntax on $to_check ..."
          # Remove import lines while parsing
          # http://projects.puppetlabs.com/issues/9670#note-14
          sed -i -e '/^import / d' $to_check >/dev/null 2>&1
          # Puppet syntax check
          puppet parser validate $to_check >/dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "Puppet syntax error in ${file}. Run 'puppet parser validate ${file}'" >&2
            STATUS=2
          fi

          # puppet-lint check
          echo "Testing puppet linting style on $to_check ..."
          puppet-lint $PUPPETLINT_FLAGS --log-format "${file}:%{linenumber} %{KIND} - %{message}" $to_check 2> /dev/null
          if [[ $? -ne 0 ]] ; then
            STATUS=2
          fi
          ;;

        erb)
          # syntax check templates - this doesn't catch a lot of mistakes,
          # but it should catch gross mistakes
          # the sed is a workaround for fixing lines beginning with %
          # as -P argument is not given to erb - still checks the line
          #
          # Example: sudoers file generated by an erb template,
          #          which has entry based on the group membership
          echo "Testing erb syntax on $to_check ..."
          sed -i 's/^%/<%= "%" %>/' "${to_check}"
          erb -x -T - "${to_check}" | ruby -c >/dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "ERB syntax error in ${file}" >&2
            STATUS=2
          fi
          ;;

        yml|yaml)
          # syntax YAML files, https://ttboj.wordpress.com/2013/08/25/finding-yaml-errors-in-puppet/
          echo "Testing yaml syntax on $to_check ..."
          ruby -ryaml -e "YAML.parse(File.open('${to_check}'))" >/dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "JSON syntax error in ${file}" >&2
            STATUS=2
          fi
          ;;

        json)
          echo "Testing json syntax on $to_check ..."
          ruby -rjson -e "JSON.parse(File.open('${to_check}').read)" >/dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "JSON syntax error in ${file}" >&2
            STATUS=2
          fi
          ;;
      esac

      # r10k Puppetfile syntax
      which r10k >/dev/null 2>&1
      if [[ $? -eq 0 ]]; then
        if [[ "$(basename $file)" == 'Puppetfile' ]]; then
          cp "${to_check}" "${TMPR10K}/Puppetfile"
          ( cd "${TMPR10K}" && r10k puppetfile check ) 2> "${to_check}"
          if [[ $? -ne 0 ]]; then
            echo "r10k syntax error in ${file}" >&2
            sed "s,${TMPR10K}/Puppetfile,${file}," >&2 < "${to_check}"
            STATUS=2
          fi
        fi
      fi
    fi
  done
done

if [[ $STATUS -ne 0 ]]; then
  echo "rejecting push"
fi

exit $STATUS
